[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

###################
## PROJECT SETUP ##
###################
[project]
name = "{{ cookiecutter.package_name }}"
description = "{{ cookiecutter.description }}"
authors = [
    { name = "{{ cookiecutter.author }}", email = "{{ cookiecutter.email }}" }
]
maintainers = [
    { name = "{{ cookiecutter.author }}", email = "{{ cookiecutter.email }}" }
]
requires-python = ">={{ cookiecutter.python_version }}"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
dynamic = ["version"]
dependencies = []

[project.urls]
{%- if cookiecutter.site_url -%}
Homepage = "{{ cookiecutter.site_url }}"
{% endif %}
{%- if cookiecutter.docs_url -%}
Documentation = "{{ cookiecutter.site_url }}"
{% endif %}
Repository = "{{ cookiecutter.repo_url }}"
Issues = "{{ cookiecutter.repo_url }}/issues"
Changelog = "{{ cookiecutter.repo_url }}/blob/main/CHANGELOG.md"

[project.optional-dependencies]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-macros-plugin",
]
test = [
    "pytest",
    "pytest-cov",
]
dev = [
    "ruff",
    "mypy",
    "pre-commit",
    "ipython",
    "ipdb",
    "{{ cookiecutter.package_name }}[docs, test]",
]

[tool.hatch.version]
path = "src/{{ cookiecutter.package_name }}/__init__.py"

[project.scripts]
{{ cookiecutter.package_name }} = "{{ cookiecutter.package_name }}.cli:main"

#########################
## TOOL CONFIGURATIONS ##
#########################
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".github",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "notebooks"
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python {{ cookiecutter.python_version }}
target-version = "py{{ cookiecutter.python_version|replace('.','') }}"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--import-mode=importlib",
    "--pdbcls=IPython.terminal.debugger:Pdb",
    "-p no:legacypath",
]
testpaths = ["tests"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    "def __repr__",

    # Don't complain about missing debug-only code:
    "if self.debug:",
    "if settings.DEBUG",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about protocols or abstract methods, they aren't run:
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true
